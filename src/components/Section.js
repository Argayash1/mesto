class Section {
  constructor({ renderer }, containerSelector) {
    this._renderer = renderer; // renderer — это функция
    this._container = document.querySelector(containerSelector); // container - это найденный по селектору 
    // контейнер, в который будут добавляться (вставляться) отрендеренные карточки
  };

// Создаём метод renderItems, который получает на вход в качестве аргумента массив карточек, проходится по массиву 
// (перебирает массив) и для каждого из объектов карточек из массива вычзывает метод _addItem, который с помощью 
// вызова метода _renderer создаёт и подготавливает к публикации экземпляр (готовый DOM-элемент) карточкиб а затем 
// вставляет его в DOM - в данном случае в список карточек (контейнер с карточками).
  renderItems(items) {
    items.reverse().forEach(item => {
      this.addItem(item); // Метод reverse() здесь применён для того, чтобы
      // при переборе массива мкарточек методом forEach развернуть массив в обратном порядке, благодаря чему
      // созданная пользователем карточка будет в начале массива как в момент создания карточки, так и после 
      // перезагрузки (рефреша) страницы, то есть она при каждом создании карточки другим пользотвателем будет 
      // продвигаться по порядку сверху вниз, а не снизу вверх, как это было без применения этого метода.
    });
  }

  // Создаём метод _addItem, который вставляет готовый элемент карточки в DOM - в данном случае в список карточек 
  // (контейнер с карточками). В качестве аргумента передаём методу addItem вызов функции _renderer, благодаря 
  // которому создаётся и подготавливается к публикации экземпляр (готовый DOM-элемент) карточки. 
  addItem(item) {
    this._container.prepend(this._renderer(item)); // вызываем _renderer, передав item
  };
}

export { Section }